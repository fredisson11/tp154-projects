name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      run_migrations:
        description: 'Run migrations?'
        required: true
        default: 'false'
        type: choice
        options: [ true, false ]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}
  IMAGE_TAG: ${{ github.sha }}
  CHART_PATH: .infrastructure/helm/api
  RELEASE_NAME: api
  NAMESPACE: default
  MIGRATIONS_ENABLED: ${{ inputs.run_migrations }}
  PYTHON_VERSION: '3.10'

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        run: |
          if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
            pytest
          else
            echo "No tests found, skipping test step."
          fi

  build-and-push:
    needs: tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg EMAIL_HOST=${{ secrets.EMAIL_HOST }} \
            --build-arg EMAIL_PORT=${{ secrets.EMAIL_PORT }} \
            --build-arg EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }} \
            --build-arg EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} \
            --build-arg EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} \
            --build-arg AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
            --build-arg AZURE_STORAGE_ACCOUNT_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }} \
            --build-arg AZURE_MEDIA_CONTAINER_NAME=${{ secrets.AZURE_MEDIA_CONTAINER_NAME }} \
            --no-cache --progress=plain \
            -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml

      - name: Set KUBECONFIG env var
        run: echo "KUBECONFIG=${{ github.workspace }}/kubeconfig.yaml" >> $GITHUB_ENV

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Deploy Helm release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          helm upgrade --install ${{ env.RELEASE_NAME }} ${{ env.CHART_PATH }} \
            --namespace ${{ env.NAMESPACE }} \
            --create-namespace \
            --set image.repository=${{ env.IMAGE_NAME }} \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set env.DB_NAME=${{ secrets.DB_NAME }} \
            --set env.DB_USER=${{ secrets.DB_USER }} \
            --set env.DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --set env.DB_HOST=${{ secrets.DB_HOST }} \
            --set env.DB_PORT=${{ secrets.DB_PORT }} \
            --set migrations.enabled=${{ env.MIGRATIONS_ENABLED }}

      - name: Wait for Deployment rollout
        run: |
          kubectl rollout status deployment/${{ env.RELEASE_NAME }} --namespace ${{ env.NAMESPACE }}
